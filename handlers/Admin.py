from aiogram.dispatcher import FSMContext
from aiogram import types, Dispatcher
from aiogram.dispatcher.filters.state import State, StatesGroup
from CreateBot import bot
from aiogram.dispatcher.filters import Text
from variables import commands
from data_base import sqlite_db
from Keyboards import del_product
from handlers.Client import send_start
from config import ID

#–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –∏–∑ –º–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
class FSMadmin(StatesGroup):
    photo = State()
    name = State()
    description = State()
    price = State()


#–†–µ–∞–∫—Ü–∏—è –Ω–∞ /reset - —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏/—É–¥–∞–ª–µ–Ω–∏—è
async def reset_state(message: types.Message, state: FSMContext):
    if await state.get_state() in commands['state_admin']:
        await state.finish()
        await message.reply('‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞\n‚ùå –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ –¥–æ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ')
    else:
        await send_start(message, state)


#–†–µ–∞–∫—Ü–∏—è –Ω–∞ "–ó–∞–≥—Ä—É–∑–∏—Ç—å" - –æ—Ç–≤–µ—Ç–Ω–∞—è –ø—Ä–æ—Å—å–±–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ
async def admin_start(message: types.Message):
    if message.from_user.id == ID:
        await FSMadmin.photo.set()
        await message.reply('–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤\n–°–Ω–∞—á–∞–ª–∞ <b>–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞</b>', parse_mode='html')


#–ó–∞–ø–∏—Å—Ç—å —Ñ–æ—Ç–æ –≤ –ø–∞–º—è—Ç—å –∏ –ø—Ä–æ—Å—å–±–∞ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
async def get_photo(message: types.Message, state: FSMContext):
    if message.from_user.id == ID:
        async with state.proxy() as data:
            data['photo'] = message.photo[0].file_id
        await FSMadmin.name.set()
        await message.reply('–§–æ—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ.\n–¢–µ–ø–µ—Ä—å, –≤–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>', parse_mode='html')


#–ó–∞–ø–∏—Å—å –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –≤ –ø–∞–º—è—Ç—å –∏ –ø—Ä–æ—Å—å–±–∞ –≤–≤–µ—Å—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
async def get_name(message: types.Message, state: FSMContext):
    if message.from_user.id == ID:
        async with state.proxy() as data:
            data['name'] = message.text
        await FSMadmin.description.set()
        await message.reply('–í–≤–µ–¥–∏—Ç–µ <b>–æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>', parse_mode='html')


#–ó–∞–ø–∏—Å—å –æ–ø–∏—Å–∞–Ω–∏—è –≤ –ø–∞–º—è—Ç—å –∏ –ø—Ä–æ—Å—å–±–∞ –≤–≤–µ—Å—Ç–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞
async def get_description(message: types.Message, state: FSMContext):
    if message.from_user.id == ID:
        async with state.proxy() as data:
            data['description'] = message.text
        await FSMadmin.price.set()
        await message.reply('–í–≤–µ–¥–∏—Ç–µ <b>—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞</b>', parse_mode='html')


#–ó–∞–ø–∏—Å—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ –ø–∞–º—è—Ç—å, –∑–∞–ø–∏—Å—å –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–∞–º—è—Ç–∏ –≤ –±–∞–∑—É product, —Å–±—Ä–æ—Å –ø–∞–º—è—Ç–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
async def get_price(message: types.Message, state: FSMContext):
    if message.from_user.id == ID:
        async with state.proxy() as data:
            data['price'] = float (message.text)
        await message.answer('<i>–í—Å—ë –≥–æ—Ç–æ–≤–æ!</i>', parse_mode='html')
        await sqlite_db.sql_add_product(state)
        await state.finish()


#–†–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–æ–º–∞–Ω–¥—É /del, –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö –∏–º–µ—é—â–∏—Ö—Å—è —Ç–æ–≤–∞—Ä–æ–≤ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
async def menu_for_delete (message: types.Message):
    if message.from_user.id == ID:
        for i in await sqlite_db.sql_send_menu():
            await bot.send_photo(message.from_user.id, i[0], f"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {i[1]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {i[2]}\n–¶–µ–Ω–∞: {i[3]} —Ä—É–±.", reply_markup=del_product(i[1]))


#–†–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–£–¥–∞–ª–∏—Ç—å" - —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –±–∞–∑—ã product
async def del_position(query: types.CallbackQuery):
    await sqlite_db.sql_delete_from_menu(query.data.replace('del ', ''))
    await query.answer('–£–î–ê–õ–ï–ù–û')
    await query.message.delete()


#–†–µ–∞–∫—Ü–∏—è –Ω–∞ –ª—é–±–æ–π —Å—Ç–∏–∫–µ—Ä
async def other_stick(message: types.Message):
    await bot.send_sticker(message.from_user.id, message.sticker.file_id)
    await message.answer (f"–£ –Ω–∞—Å —Ç–æ–∂–µ –µ—Å—Ç—å —Ç–∞–∫–æ–π —Å—Ç–∏–∫–µ—Ä üòÖ\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏–∑ —Å–ø–∏—Å–∫–∞ ‚¨á\n\n"
                          f"{commands['help_info']}", parse_mode='html')


#–†–µ–∞–∫—Ü–∏—è –Ω–∞ –ª—é–±–æ–µ —Ñ–æ—Ç–æ
async def other_photo(message: types.Message):
    await message.reply(f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é ü§î\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å —á—Ç–æ-—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞ ‚¨á\n\n{commands['help_info']}",
                        parse_mode='html')


#–†–µ–∞–∫—Ü–∏—è –Ω–∞ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç
async def other_message(message: types.Message):
    await message.reply(f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å —á—Ç–æ-—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞ ‚¨á\n\n"
                        f"{commands['help_info']}", parse_mode='html')


#–ò–Ω–∏—Ü–∏–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö –≤—ã—à–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
def admin_handler(dp: Dispatcher):
    dp.register_message_handler(reset_state, Text(commands['reset_command'], ignore_case=True), state='*')
    dp.register_message_handler(admin_start, Text(commands['load_command'], ignore_case=True), state='*')
    dp.register_message_handler(menu_for_delete, Text(commands['del_command'], ignore_case=True), state='*')
    dp.register_message_handler(get_photo, content_types=['photo'], state=FSMadmin.photo)
    dp.register_message_handler(get_name, state=FSMadmin.name)
    dp.register_message_handler(get_description, state=FSMadmin.description)
    dp.register_message_handler(get_price, state=FSMadmin.price)
    dp.register_message_handler(other_photo, content_types=['photo'], state='*')
    dp.register_message_handler(other_stick, content_types=['sticker'], state='*')
    dp.register_message_handler(other_message, state='*')
    dp.register_callback_query_handler(del_position, lambda x: x.data and x.data.startswith('del '))



